fprintf('Problem 5\n\n')
% Author: Anant Girdhar
% Date: 2024-09-25

gamma = 30;  % degrees

% Part (a)
disp('Part (a)')
% Create a matrix of boresight unit vectors
H0 = [ ...
   sin(gamma)  cos(gamma)           0; ...
   sin(gamma) -cos(gamma)           0; ...
            0  sin(gamma)  cos(gamma); ...
            0  sin(gamma) -cos(gamma); ...
   cos(gamma)           0  sin(gamma); ...
  -cos(gamma)           0  sin(gamma); ...
  -sin(gamma)  cos(gamma)           0; ...
  -sin(gamma) -cos(gamma)           0; ...
            0 -sin(gamma)  cos(gamma); ...
            0 -sin(gamma) -cos(gamma); ...
   cos(gamma)           0 -sin(gamma); ...
  -cos(gamma)           0 -sin(gamma)]
% H0 = [ ...
%        sind(0)      cosd(0)            0; ...
%        sind(0)     -cosd(0)            0; ...
%              0  sind(gamma)  cosd(gamma); ...
%              0  sind(gamma) -cosd(gamma); ...
%    cosd(gamma)            0  sind(gamma); ...
%   -cosd(gamma)            0  sind(gamma); ...
%       -sind(0)      cosd(0)            0; ...
%       -sind(0)     -cosd(0)            0; ...
%              0 -sind(gamma)  cosd(gamma); ...
%              0 -sind(gamma) -cosd(gamma); ...
%    cosd(gamma)            0 -sind(gamma); ...
%   -cosd(gamma)            0 -sind(gamma)]

% Part (b)
disp('Part (b)')
% Find illuminated boresight vectors
s_B = [0.2475, -0.8392, 0.4842]';
s_B = s_B / vecnorm(s_B);
illumination_ratio = H0 * s_B;
illumination_angle = acosd(illumination_ratio)
H = H0(find(illumination_angle < 60), :)

% Part (c)
disp('Part (c)')
% Find the matrix to convert illumination vectors into estimated sun position
R = 0.1 * eye(size(H));
R^(-1);
P = (H' * R^(-1) * H) ^ (-1);
M = P * H' * R^(-1)
% Verify that this seems correct
disp('Applying this matrix to the given sun sensor measurements gives:')
s_estimated = M * illumination_ratio(illumination_angle < 60)
disp('which is the given sun vector')

% Part (d)
disp('Part (d)')
disp(P)
